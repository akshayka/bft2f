#!/usr/bin/python
import os
import sys, glob
from bft2f_pb2 import *
sys.path.append('gen-py')
from user_base import get_client, get_host_ip
from argparse import ArgumentParser
from Crypto.PublicKey import RSA 
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA 
from smtplib import SMTP
import socket
import json
from base64 import b64encode, b64decode
from auth_service.ttypes import *

BUFFER_SIZE = 10000

def my_sign(private_key, data):
    digest = SHA.new(data)
    res = private_key.sign(digest) 
    return b64encode(res)

parser = ArgumentParser()
parser.add_argument('--client_id', '-cid',
                    type=str,
                    default='c0',
                    required=False)
parser.add_argument('--app_id', '-aid',
                    type=str,
                    default='app',
                    required=False)
parser.add_argument('--user_id', '-u',
                    type=str,
                    required=True)
parser.add_argument('--passphrase', '-p',
                    type=str,
                    required=True)
args = parser.parse_args()


app_ip = get_host_ip(args.app_id)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((app_ip,2225))
data = s.recv(BUFFER_SIZE)
print data
s.send("ehlo local\n")
data = s.recv(BUFFER_SIZE)
print data
s.send("auth cram-cert\n")
data = s.recv(BUFFER_SIZE)
print data
token = b64decode(data.split(" ")[1])

client, t = get_client(args.client_id)
rmsg = client.sign_in(user_id=args.user_id, token=token)
t.close()
print str(rmsg)[:80],"..."
#print str(rmsg)
if rmsg.status != Auth_Service_Res_Status.Success:
    print "User doesn't exist"
    exit()
sign_in_certs = [[cert.node_pub_key, cert.sig] for cert in rmsg.sign_in_certs]
try:
    priv_key = PKCS1_v1_5.new(RSA.importKey(rmsg.user_priv_key_enc,args.passphrase))
except:
    print("Wrong password")
    exit()
sign_in_certs.append([rmsg.user_pub_key, my_sign(priv_key, token+rmsg.user_pub_key)])
auth_str = b64encode(json.dumps({'id':args.user_id, 'pub_key':rmsg.user_pub_key,'signature':sign_in_certs}))

#print auth_str

s.send(auth_str+"\n")
data = s.recv(BUFFER_SIZE)
print data

s.close()

